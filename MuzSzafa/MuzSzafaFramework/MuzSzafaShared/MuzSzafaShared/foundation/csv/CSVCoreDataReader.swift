//
//  CSVCoreDataReader.swift
//  MuzSzafaShared
//
//  Created by Alagris on 13/06/2018.
//  Copyright Â© 2018 alagris. All rights reserved.
//

import Foundation

private extension CoreDataAttr{
    var toMany:Bool{
        get{
            return (self as? CoreDataRelatEntry)?.isToMany ?? false
        }
    }
}

open class CSVCoreDataReader:CSVReader{
    public private(set) var ent:CoreDataEntity!
    public private(set) var attrs:[CoreDataAttr?] = []
    public private(set) var pkIndex:Int = -1
    public private(set) var pkAttr:CoreDataAttr!
    
    
    open func setHeaderManually(ent:CoreDataEntity,attrs:[CoreDataAttr?]) throws{
        self.ent = ent
        self.attrs = attrs.map(){
            if let o = $0{
                if o.parent == ent{
                    return o
                }
            }
            return nil
        }
        try updatePrimaryKeyIndex()
    }
    open func loadNextRowAsHeader(for ent:CoreDataEntity) throws{
        guard let vals = nextRowAsArr() else{
            throw CSVException.ReadingFail("Header row not found!")
        }
//        if isEmpty(row: vals){
//            throw CSVException.ReadingFail("Header row is empty!")
//        }
        self.ent = ent
        
        self.attrs = ent.deserializeAttrs(names: vals)
//		.filter(){
//            !($0?.toMany ?? false)
//        }
        try updatePrimaryKeyIndex()
    }
    
    
    private func updatePrimaryKeyIndex() throws{
        if let pkIndex = attrs.index(where: {$0?.isPrimaryKey ?? false}){
            self.pkIndex = pkIndex
            self.pkAttr = attrs[pkIndex]!
        }else{
			if self.ent.primaryKeyAttr.isAutogenerated{
				self.pkIndex = -1
				self.pkAttr = nil
			}else{
            	throw CSVException.ReadingFail("Primary key is not included in CSV")
			}
        }
    }
    
    open func loadNextRow() throws -> Bool{
        guard let values = nextRowAsArr() else{
            return false
        }
		try ent.set(values: values, for: attrs, pkIndex: pkIndex, pkAttr: pkAttr)
        return true
    }
    
    open func loadTillEnd() throws{
        while try loadNextRow(){}
    }
    
    open func loadNextNRows(n:Int) throws{
        for _ in 0..<n{
            guard try loadNextRow() else{break}
        }
    }
    
    
}
