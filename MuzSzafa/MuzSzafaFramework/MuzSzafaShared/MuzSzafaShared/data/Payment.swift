//
//  Payment.swift
//  MuzSzafaShared
//
//  Created by Alagris on 01/05/2018.
//  Copyright Â© 2018 alagris. All rights reserved.
//

import CoreData
public extension Payment{
    static func createNew(_ deal:Deal,_ date:Date=Date())->Payment?{
        let ent = Payment.ent
        if let mo = ent.newAutogenerated(){
            let payment = Payment.cast(mo)!
			payment.deal = deal
            payment.paid_at = date
            let lastPayment = deal.lastPayment()
			let checkoutDayThisMonth = deal.getCheckoutDay(inMonth: date)
            let endOfLastPayment = lastPayment?.term_end ?? deal.from
            let startOfNewPayment = endOfLastPayment ?? checkoutDayThisMonth ?? date
			let endOfNewPayment = startOfNewPayment.increaseBySingleTermLength()
            payment.term_begin = startOfNewPayment
			payment.term_end = endOfNewPayment
            payment.money_amount = deal.pricing
            return payment
        }
        return nil
    }
	public static var ent:CoreDataEntity{
		get{
			return CoreContext.find(ent: "Payment")!
		}
	}
	
	public static var term_begin:CoreDataAttrEntry{
		get{
			return ent.find(attr: "term_begin")! as! CoreDataAttrEntry
		}
	}
	
	public static var term_end:CoreDataAttrEntry{
		get{
			return ent.find(attr: "term_end")! as! CoreDataAttrEntry
		}
	}
	
	public static var paid_at:CoreDataAttrEntry{
		get{
			return ent.find(attr: "paid_at")! as! CoreDataAttrEntry
		}
	}
	
	public static var deal:CoreDataRelatEntry{
		get{
			return ent.find(attr: "deal")! as! CoreDataRelatEntry
		}
	}
	
	public static var paid:CoreDataAttrEntry{
		get{
			return ent.find(attr: "paid")! as! CoreDataAttrEntry
		}
	}
	
	public static func safePred(_ expr:SafePredicate.Node)->SafePredicate{
		return SafePredicate(ent: ent, expr: expr)
	}
    public static func filter(validAt date:Date)->SafePredicate.Node{
		return term_begin.lt(date).and(term_end.gt(date))
    }
    public static func filter(validAtDay date:Date)->SafePredicate.Node{
        let dayBegin = date.getDayBegin() ?? date
        let dayEnd = date.getDayEnd() ?? date
		return term_begin.lt(dayEnd).and(term_end.gt(dayBegin))
//        return NSPredicate(format: "%K < %@ && %@ < %K", argumentArray: ["term_begin",dayEnd,dayBegin,"term_end"])
    }
    public static func filter(endsAtDay date:Date)->SafePredicate.Node{
        let dayBegin = date.getDayBegin() ?? date
        let dayEnd = date.getDayEnd() ?? date
		return term_end.gt(dayBegin).and(term_end.lt(dayEnd))
//        return NSPredicate(format: "%@ < %K && %K < %@", argumentArray: [dayBegin,"term_end","term_end",dayEnd])
    }
    public static func filter(validAtMonth date:Date)->SafePredicate.Node{
        let monthBegin = date.getMonthBegin() ?? date
        let monthEnd = date.getMonthEnd() ?? date
		return term_begin.lt(monthEnd).and(term_end.gt(monthBegin))
//        return NSPredicate(format: "%K < %@ && %@ < %K", argumentArray: ["term_begin",monthEnd,monthBegin,"term_end"])
    }
    public static func filter(endsAtMonth date:Date)->SafePredicate.Node{
        let monthBegin = date.getMonthBegin() ?? date
        let monthEnd = date.getMonthEnd() ?? date
		return term_end.gt(monthBegin).and(term_end.lt(monthEnd))
//        return NSPredicate(format: "%@ < %K && %K < %@", argumentArray: [monthBegin,"term_end","term_end",monthEnd])
    }
    public static func filter(validAtPaymentDay date:Date)->SafePredicate.Node{
        let dayBegin = date.getDayBegin() ?? date
        let dayEnd = date.getDayEnd() ?? date
		return paid_at.gt(dayBegin).and(paid_at.lt(dayEnd))
//        return NSPredicate(format: "%@ < %K && %K < %@", argumentArray: [dayBegin,"paid_at","paid_at",dayEnd])
    }
	
//    public static func select(validAt date:Date)-> NSFetchedResultsController<NSManagedObject>{
//        let pred = filter(validAt: date)
//        let ent = CoreContext.find(ent: "Payment")!
//        let out = ent.makeReqController(pred: pred)
//        return out
//    }
	public static func cast(_ any:Any)->Payment?{
		return cast(any, ent: CoreContext.find(ent:"Payment")!)
	}
	public static func cast(_ any:Any?)->Client?{
		return cast(any, ent: CoreContext.find(ent:"Client")!)
	}
	public static func cast(_ mo:NSManagedObject)->Payment?{
		return cast(mo, ent: CoreContext.find(ent:"Payment")!)
	}
	public static func cast(_ mo:NSManagedObject?)->Payment?{
		if let mo = mo{
			return cast(mo)
		}
		return nil
	}
}
